Below are some instructions information for python users:
    Note this is a live document, so check in every once and a while

To install Python:
    Access to your computer:
        Admin rights to your computer is almost essentail for python programming. log a helpme and say you will be
        loading a package a day for the foreseable future. hopefully they will cave quickly.

    Python Version:
        Here we are using python 2.7 though we try to maintain compatability for python 3.x
        Most scripts will work best with the 64 bit installation of python, though the interface with hydstra currently
        requires the 32 bit version of python.  It may be beneficial to install multiple builds

    Install python itself:
        We are using anaconda which simplifies the python installation process and contains a whole heap pre-installed
        pre-compiled packages.

        go to https://www.continuum.io/downloads and download the 64 bit installer

        be cognisant were you place python I recommend placeing it in: "C:\Anaconda27_64" as this eases some of the
        challenges of the ecan fire wall

    Install other needed packages for the scripts in this project open the annaconda prompt (via start menu)
    and copy each of these commands:
        conda install seaborn xarray networkx pymssql
        conda install -c conda-forge geopandas
        conda install -c conda-forge rasterio
        pip install pygeoprocessing pycrs
            to install pygeoprocessing a C++ compiler is need get it here (instructions on that page):
                https://www.microsoft.com/en-us/download/details.aspx?id=44266
        pip install future # for code compatability packages such as builtins
        pip install patool

        pykrige - another kriging module pip install pykrige

    Other helpful packages to install:
        Flopy: Run and interact with modflow models (talk to matth there are some bugs in the SFR2 package)
            normal:
                pip install flopy
            bleeding edge:
                pip install git+https://github.com/modflowpy/flopy.git

     Other packages that we're playing with:
     pykriging n-dimentional kriging for python pip install pykriging
     mayavi - 3d visualisation in python (used for some pykriging functions) pip install mayavi
     pypdf2 - conda install -c conda-forge pypdf2=1.26.0  manage pdfs (useing for joining at the moment)


Integrated development editor:
    Matt H prefers Pycharm community edition because it has some very handy tricks, chat with Matt about these
    capabilities:
        https://www.jetbrains.com/pycharm/download/#section=windows

    Mike E. uses Spyder which is installed by anaconda

Git setup and conventions: #todo
    Install git
        https://git-scm.com/

    # sync gitlab with pycharm

    Add PYTHONPATH to enviroment settings
        This allows you to create .bat files which rely on the code in the ecan_hydro project
        -search for enviroment variables on your pc
        -create a new system variable PYTHONPATH and add path to your ECAN_code folder
            To make a bat file run similar to my IDE I typically copy the values of sys.path(in the consol), replace
            the , with ; the \\ with \ and remove the spaces and place it in the new PYTHONPATH variable value

    CORE vs EXAMPLES vs USERS:



Conventions(rule = comply, suggestion = it would be nice):
    Pep8 (rule): Were possible we adhere to pep8 conventions
        Classes have the first letter capitalized e.g. Class
        functions and variables are all lower case


    Ecan path handeling (rule):
        in order to ensure that scripts work on every computer (and to ensure that we can easily support future linux
        support) we use a env class
        the import
            from core import env
        usage env.sci("test.txt") returns '//gisdata/Projects/SCI/test.txt'
        to load this text for instance could be done via pandas as pd.load_table(env.sci("test.txt"))
        There are other directories mapped.  look at the env class for documentation

    Modular programming (guideline):
        Where possible break your code down into small modules (e.g. functions) a good rule of thumb is that if you
        function is getting longer than ~150 lines, it probably should be broken up.

        Please wrap main scripts in a function as this stops the code from running if it is imported and example:
            def main():
                scripted stuff and processing

            at the bottom of the script
            if __name__ == '__main__':
                main()

    Standard imports (external conventions)
        import numpy as np
        import pandas as pd
        import matplotlib.pyplot as plt

Python 2-3 compatability:
    WHERE POSSIBLE PLEASE WRITE PYTHON 3 COMPATABLE SCRIPTS

    Also Matt H highly recomends including 'from __future__ import division' into any script to use the non-floor division
    functionality of python3 e.g. python2: 2/3 = 0 python3: 2/3 = 0.6666

Resources:
    Tutorial: http://www.python-course.eu/index.php
        I would read through python 2 and numerical python
        The most important pages of this to read (as a quick start):
        Basic python:
            http://www.python-course.eu/interactive.php
            http://www.python-course.eu/blocks.php
            http://www.python-course.eu/variables.php
            http://www.python-course.eu/operators.php
            http://www.python-course.eu/conditional_statements.php
            http://www.python-course.eu/loops.php
            http://www.python-course.eu/for_loop.php
            http://www.python-course.eu/sequential_data_types.php
            http://www.python-course.eu/dictionaries.php
            http://www.python-course.eu/sets_frozensets.php
            http://www.python-course.eu/deep_copy.php
            http://www.python-course.eu/functions.php
            http://www.python-course.eu/passing_arguments.php
            http://www.python-course.eu/global_vs_local_variables.php
            http://www.python-course.eu/modules_and_modular_programming.php
            http://www.python-course.eu/list_comprehension.php
            http://www.python-course.eu/exception_handling.php
            http://www.python-course.eu/object_oriented_programming.php

        Numpy:
            http://www.python-course.eu/numpy.php
            http://www.python-course.eu/numpy_numerical_operations_on_numpy_arrays.php
            http://www.python-course.eu/numpy_masking.php


        Pandas:
            http://www.python-course.eu/pandas.php
            http://www.python-course.eu/more_on_pandas.php

        Matplotlib:
            graphing package... look up when you need it


    Pep8 : https://www.python.org/dev/peps/pep-0008/
        style guide if you ever need to refer to it.  Some conventions to know class objects always start with a capital letter and functions are always lowercase

    Zen of python :  https://www.python.org/dev/peps/pep-0020/ these are basic goals and are worth a read

    Cheat sheet to python 2/3 compatibility: http://python-future.org/compatible_idioms.html a good reference


Useful External Packages (already installed with anaconda or above)
    everyday use:
        numpy - arrays
        pandas - dataframes
        matplotlib - plotting function
        scipy - many statistical resources
        copy - copy and deepcopy

    datetime - easily handle dates and times
    flopy - modflow, modpath, mt3d, seawat, pest interface
    future - enable further python 3 code compatability
    gdal,osr,ogr - GIS libraries
    geopandas - like pandas but with some good GIS options
    glob - return list of paths matching a template
    itertools - handle complex iterative actions
    logging - set up exception logging
    multiprocessing - script parallelization
    os - make and delete directories ect.
    pickle - save python objects
    rasterio - easy raster manipulations
    shutil - more os opperations particularly delete a full folder and all files
    sklearn - good statistical library
    statsmodels - stats package and r style statistical model set up
    time - for bulk timing operations (run times)
    timit - for estimating run times of small code snipits
    warnings - create and modify warnings and options

Other useful programs to support python work
    Notepad ++ - a more robust text editor to examine all sorts of text files
    infran viewer - a powerful image viewer which easily flips through both raster (e.g. png) and vector(pdf) files



Bugs in developed packages:
    Flopy.modflow.ModflowPCGN lines 290 291:
                    line += '{} '.format(close_r) -- should be self.close_r
                    line += '{}\n'.format(close_h) -- should be self.close_h
                    has been posted as an issue to the git and resolved in the development version









